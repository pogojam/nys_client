{"ast":null,"code":"var __jsx = React.createElement;\nimport ReactDOM from \"react-dom\";\nimport React, { useRef, useEffect } from \"react\";\n\nconst callback = () => {\n  console.log(\"HI\");\n};\n\nfunction Observer({\n  children\n}) {\n  const childRef = useRef();\n  useEffect(() => {\n    console.log(childRef);\n    const options = {\n      root: childRef.current,\n      rootMargin: \"0px\",\n      threshold: [1.0, 0.5, 0]\n    };\n    const observer = new IntersectionObserver(callback, options);\n  }, [childRef]);\n  return __jsx(React.Fragment, null, React.Children.map(children, (el, i) => {\n    return React.cloneElement(el, {\n      ref: childRef\n    });\n  }));\n}\n\nexport default Observer;","map":{"version":3,"sources":["/Users/ryanbreaux/Projects/Web/Clients/nps_v2/lib/interface/observer.js"],"names":["ReactDOM","React","useRef","useEffect","callback","console","log","Observer","children","childRef","options","root","current","rootMargin","threshold","observer","IntersectionObserver","Children","map","el","i","cloneElement","ref"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,CAFD;;AAIA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,QAAMC,QAAQ,GAAGP,MAAM,EAAvB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,UAAMC,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAEF,QAAQ,CAACG,OADD;AAEdC,MAAAA,UAAU,EAAE,KAFE;AAGdC,MAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX;AAHG,KAAhB;AAMA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBZ,QAAzB,EAAmCM,OAAnC,CAAjB;AACD,GATQ,EASN,CAACD,QAAD,CATM,CAAT;AAWA,SACE,4BACGR,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBV,QAAnB,EAA6B,CAACW,EAAD,EAAKC,CAAL,KAAW;AACvC,WAAOnB,KAAK,CAACoB,YAAN,CAAmBF,EAAnB,EAAuB;AAAEG,MAAAA,GAAG,EAAEb;AAAP,KAAvB,CAAP;AACD,GAFA,CADH,CADF;AAOD;;AAED,eAAeF,QAAf","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { useRef, useEffect } from \"react\";\n\nconst callback = () => {\n  console.log(\"HI\");\n};\n\nfunction Observer({ children }) {\n  const childRef = useRef();\n\n  useEffect(() => {\n    console.log(childRef);\n    const options = {\n      root: childRef.current,\n      rootMargin: \"0px\",\n      threshold: [1.0, 0.5, 0]\n    };\n\n    const observer = new IntersectionObserver(callback, options);\n  }, [childRef]);\n\n  return (\n    <>\n      {React.Children.map(children, (el, i) => {\n        return React.cloneElement(el, { ref: childRef });\n      })}\n    </>\n  );\n}\n\nexport default Observer;\n"]},"metadata":{},"sourceType":"module"}