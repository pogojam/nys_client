{"ast":null,"code":"import React, { useState, useEffect, useRef } from \"react\";\n\nconst useObserver = ({\n  root = null,\n  rootMargin,\n  threshold = 0\n}) => {\n  const {\n    0: entry,\n    1: updateEntry\n  } = useState({});\n  const {\n    0: node,\n    1: setNode\n  } = useState(null);\n  const isWindow = false;\n  const observer = isWindow ? useRef(new window.IntersectionObserver(([entry]) => updateEntry(entry), {\n    root,\n    rootMargin,\n    threshold\n  })) : null;\n  useEffect(() => {\n    const {\n      current: currentObserver\n    } = observer;\n    currentObserver.disconnect();\n    if (node) currentObserver.observe(node);\n    return () => currentObserver.disconnect();\n  }, [node]);\n  return [setNode, entry];\n};\n\nexport default useObserver;","map":{"version":3,"sources":["/Users/ryanbreaux/Projects/Web/Clients/nps_v2/lib/interface/useObserver.js"],"names":["React","useState","useEffect","useRef","useObserver","root","rootMargin","threshold","entry","updateEntry","node","setNode","isWindow","observer","window","IntersectionObserver","current","currentObserver","disconnect","observe"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,IAAT;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,SAAS,GAAG;AAAvC,CAAD,KAAgD;AAClE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAuBR,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM;AAAA,OAACS,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMW,QAAQ,QAAd;AAEA,QAAMC,QAAQ,GAAGD,QAAQ,GACrBT,MAAM,CACJ,IAAIW,MAAM,CAACC,oBAAX,CAAgC,CAAC,CAACP,KAAD,CAAD,KAAaC,WAAW,CAACD,KAAD,CAAxD,EAAiE;AAC/DH,IAAAA,IAD+D;AAE/DC,IAAAA,UAF+D;AAG/DC,IAAAA;AAH+D,GAAjE,CADI,CADe,GAQrB,IARJ;AAUAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEc,MAAAA,OAAO,EAAEC;AAAX,QAA+BJ,QAArC;AACAI,IAAAA,eAAe,CAACC,UAAhB;AAEA,QAAIR,IAAJ,EAAUO,eAAe,CAACE,OAAhB,CAAwBT,IAAxB;AAEV,WAAO,MAAMO,eAAe,CAACC,UAAhB,EAAb;AACD,GAPQ,EAON,CAACR,IAAD,CAPM,CAAT;AASA,SAAO,CAACC,OAAD,EAAUH,KAAV,CAAP;AACD,CAzBD;;AA2BA,eAAeJ,WAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst useObserver = ({ root = null, rootMargin, threshold = 0 }) => {\n  const [entry, updateEntry] = useState({});\n  const [node, setNode] = useState(null);\n  const isWindow = typeof window !== `undefined`;\n\n  const observer = isWindow\n    ? useRef(\n        new window.IntersectionObserver(([entry]) => updateEntry(entry), {\n          root,\n          rootMargin,\n          threshold\n        })\n      )\n    : null;\n\n  useEffect(() => {\n    const { current: currentObserver } = observer;\n    currentObserver.disconnect();\n\n    if (node) currentObserver.observe(node);\n\n    return () => currentObserver.disconnect();\n  }, [node]);\n\n  return [setNode, entry];\n};\n\nexport default useObserver;\n"]},"metadata":{},"sourceType":"module"}