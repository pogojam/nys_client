{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nvar useObserver = function useObserver(_ref) {\n  var _ref$root = _ref.root,\n      root = _ref$root === void 0 ? null : _ref$root,\n      rootMargin = _ref.rootMargin,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold;\n\n  var _useState = useState({}),\n      entry = _useState[0],\n      updateEntry = _useState[1];\n\n  var _useState2 = useState(null),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var isWindow = true;\n  var observer = isWindow ? useRef(new window.IntersectionObserver(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        entry = _ref3[0];\n\n    return updateEntry(entry);\n  }, {\n    root: root,\n    rootMargin: rootMargin,\n    threshold: threshold\n  })) : null;\n  useEffect(function () {\n    var currentObserver = observer.current;\n    currentObserver.disconnect();\n    if (node) currentObserver.observe(node);\n    return function () {\n      return currentObserver.disconnect();\n    };\n  }, [node]);\n  return [setNode, entry];\n};\n\nexport default useObserver;","map":null,"metadata":{},"sourceType":"module"}