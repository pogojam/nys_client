{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nvar useObserver = function useObserver(_ref) {\n  var _ref$root = _ref.root,\n      root = _ref$root === void 0 ? null : _ref$root,\n      rootMargin = _ref.rootMargin,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold;\n\n  var _useState = useState({}),\n      entry = _useState[0],\n      updateEntry = _useState[1];\n\n  var _useState2 = useState(null),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var isWindow = true;\n  var observer = isWindow ? useRef(new window.IntersectionObserver(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        entry = _ref3[0];\n\n    return updateEntry(entry);\n  }, {\n    root: root,\n    rootMargin: rootMargin,\n    threshold: threshold\n  })) : null;\n  useEffect(function () {\n    var currentObserver = observer.current;\n    currentObserver.disconnect();\n    if (node) currentObserver.observe(node);\n    return function () {\n      return currentObserver.disconnect();\n    };\n  }, [node]);\n  return [setNode, entry];\n};\n\nexport default useObserver;","map":{"version":3,"sources":["/Users/ryanbreaux/Projects/Web/Clients/nps_v2/lib/interface/useObserver.js"],"names":["React","useState","useEffect","useRef","useObserver","root","rootMargin","threshold","entry","updateEntry","node","setNode","isWindow","observer","window","IntersectionObserver","currentObserver","current","disconnect","observe"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAgD;AAAA,uBAA7CC,IAA6C;AAAA,MAA7CA,IAA6C,0BAAtC,IAAsC;AAAA,MAAhCC,UAAgC,QAAhCA,UAAgC;AAAA,4BAApBC,SAAoB;AAAA,MAApBA,SAAoB,+BAAR,CAAQ;;AAAA,kBACrCN,QAAQ,CAAC,EAAD,CAD6B;AAAA,MAC3DO,KAD2D;AAAA,MACpDC,WADoD;;AAAA,mBAE1CR,QAAQ,CAAC,IAAD,CAFkC;AAAA,MAE3DS,IAF2D;AAAA,MAErDC,OAFqD;;AAGlE,MAAMC,QAAQ,OAAd;AACA,MAAMC,QAAQ,GAAGD,QAAQ,GACrBT,MAAM,CACJ,IAAIW,MAAM,CAACC,oBAAX,CAAgC;AAAA;AAAA,QAAEP,KAAF;;AAAA,WAAaC,WAAW,CAACD,KAAD,CAAxB;AAAA,GAAhC,EAAiE;AAC/DH,IAAAA,IAAI,EAAJA,IAD+D;AAE/DC,IAAAA,UAAU,EAAVA,UAF+D;AAG/DC,IAAAA,SAAS,EAATA;AAH+D,GAAjE,CADI,CADe,GAQrB,IARJ;AAUAL,EAAAA,SAAS,CAAC,YAAM;AAAA,QACGc,eADH,GACuBH,QADvB,CACNI,OADM;AAEdD,IAAAA,eAAe,CAACE,UAAhB;AAEA,QAAIR,IAAJ,EAAUM,eAAe,CAACG,OAAhB,CAAwBT,IAAxB;AAEV,WAAO;AAAA,aAAMM,eAAe,CAACE,UAAhB,EAAN;AAAA,KAAP;AACD,GAPQ,EAON,CAACR,IAAD,CAPM,CAAT;AASA,SAAO,CAACC,OAAD,EAAUH,KAAV,CAAP;AACD,CAxBD;;AA0BA,eAAeJ,WAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst useObserver = ({ root = null, rootMargin, threshold = 0 }) => {\n  const [entry, updateEntry] = useState({});\n  const [node, setNode] = useState(null);\n  const isWindow = typeof window !== `undefined`;\n  const observer = isWindow\n    ? useRef(\n        new window.IntersectionObserver(([entry]) => updateEntry(entry), {\n          root,\n          rootMargin,\n          threshold,\n        })\n      )\n    : null;\n\n  useEffect(() => {\n    const { current: currentObserver } = observer;\n    currentObserver.disconnect();\n\n    if (node) currentObserver.observe(node);\n\n    return () => currentObserver.disconnect();\n  }, [node]);\n\n  return [setNode, entry];\n};\n\nexport default useObserver;\n"]},"metadata":{},"sourceType":"module"}