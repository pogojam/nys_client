{"ast":null,"code":"var _jsxFileName = \"/Users/ryanbreaux/Projects/Web/Clients/nps_v2/lib/animations/spring.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useObserver } from \"../interface/\";\nimport { buildThresholdList } from \"util\";\nimport { useSpring } from \"react-spring\"; // React Spring Animations\n\nconst slideInRight = state => ({\n  transform: `translateX(${state ? 0 : -100}%)`\n});\n\nconst slideInDown = state => ({\n  transform: `translateY(${state ? 0 : -100}%)`\n});\n\nconst slideInLeft = state => ({\n  transform: `translateX(${state ? 0 : 100}%)`\n});\n\nconst slideInBottom = state => ({\n  transform: `translateY(${state ? 0 : 100}%)`\n});\n\nconst fadeIn = state => ({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n}); // Wrappers\n\n\nconst AnimationWrapper = ({\n  root\n}) => {\n  const [ref, entries] = useObserver({\n    root,\n    threshold: buildThresholdList(20)\n  });\n  const [animation, setAnimation] = useSpring(() => ({\n    opacity: [0]\n  }));\n  useEffect(() => {\n    if (entries) {\n      setAnimation({\n        opacity: [entries.intersectionRatio]\n      });\n    }\n  });\n  return __jsx(animated.div, {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  });\n};\n\nconst spring = {\n  fadeIn,\n  slideInBottom,\n  slideInDown,\n  slideInLeft,\n  slideInRight\n};\nexport default spring;","map":{"version":3,"sources":["/Users/ryanbreaux/Projects/Web/Clients/nps_v2/lib/animations/spring.js"],"names":["React","useEffect","useObserver","buildThresholdList","useSpring","slideInRight","state","transform","slideInDown","slideInLeft","slideInBottom","fadeIn","from","opacity","to","AnimationWrapper","root","ref","entries","threshold","animation","setAnimation","intersectionRatio","spring"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,kBAAT,QAAmC,MAAnC;AACA,SAASC,SAAT,QAA0B,cAA1B,C,CAEA;;AACA,MAAMC,YAAY,GAAIC,KAAD,KAAY;AAC/BC,EAAAA,SAAS,EAAG,cAAaD,KAAK,GAAG,CAAH,GAAO,CAAC,GAAI;AADX,CAAZ,CAArB;;AAIA,MAAME,WAAW,GAAIF,KAAD,KAAY;AAC9BC,EAAAA,SAAS,EAAG,cAAaD,KAAK,GAAG,CAAH,GAAO,CAAC,GAAI;AADZ,CAAZ,CAApB;;AAIA,MAAMG,WAAW,GAAIH,KAAD,KAAY;AAC9BC,EAAAA,SAAS,EAAG,cAAaD,KAAK,GAAG,CAAH,GAAO,GAAI;AADX,CAAZ,CAApB;;AAIA,MAAMI,aAAa,GAAIJ,KAAD,KAAY;AAChCC,EAAAA,SAAS,EAAG,cAAaD,KAAK,GAAG,CAAH,GAAO,GAAI;AADT,CAAZ,CAAtB;;AAGA,MAAMK,MAAM,GAAIL,KAAD,KAAY;AACzBM,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GADmB;AAIzBC,EAAAA,EAAE,EAAE;AACFD,IAAAA,OAAO,EAAE;AADP;AAJqB,CAAZ,CAAf,C,CASA;;;AAEA,MAAME,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACrC,QAAM,CAACC,GAAD,EAAMC,OAAN,IAAiBhB,WAAW,CAAC;AACjCc,IAAAA,IADiC;AAEjCG,IAAAA,SAAS,EAAEhB,kBAAkB,CAAC,EAAD;AAFI,GAAD,CAAlC;AAKA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BjB,SAAS,CAAC,OAAO;AACjDS,IAAAA,OAAO,EAAE,CAAC,CAAD;AADwC,GAAP,CAAD,CAA3C;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,OAAJ,EAAa;AACXG,MAAAA,YAAY,CAAC;AACXR,QAAAA,OAAO,EAAE,CAACK,OAAO,CAACI,iBAAT;AADE,OAAD,CAAZ;AAGD;AACF,GANQ,CAAT;AAQA,SAAO,MAAC,QAAD,CAAU,GAAV;AAAc,IAAA,GAAG,EAAEL,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAnBD;;AAqBA,MAAMM,MAAM,GAAG;AACbZ,EAAAA,MADa;AAEbD,EAAAA,aAFa;AAGbF,EAAAA,WAHa;AAIbC,EAAAA,WAJa;AAKbJ,EAAAA;AALa,CAAf;AAQA,eAAekB,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useObserver } from \"../interface/\";\nimport { buildThresholdList } from \"util\";\nimport { useSpring } from \"react-spring\";\n\n// React Spring Animations\nconst slideInRight = (state) => ({\n  transform: `translateX(${state ? 0 : -100}%)`,\n});\n\nconst slideInDown = (state) => ({\n  transform: `translateY(${state ? 0 : -100}%)`,\n});\n\nconst slideInLeft = (state) => ({\n  transform: `translateX(${state ? 0 : 100}%)`,\n});\n\nconst slideInBottom = (state) => ({\n  transform: `translateY(${state ? 0 : 100}%)`,\n});\nconst fadeIn = (state) => ({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n});\n\n// Wrappers\n\nconst AnimationWrapper = ({ root }) => {\n  const [ref, entries] = useObserver({\n    root,\n    threshold: buildThresholdList(20),\n  });\n\n  const [animation, setAnimation] = useSpring(() => ({\n    opacity: [0],\n  }));\n\n  useEffect(() => {\n    if (entries) {\n      setAnimation({\n        opacity: [entries.intersectionRatio],\n      });\n    }\n  });\n\n  return <animated.div ref={ref}></animated.div>;\n};\n\nconst spring = {\n  fadeIn,\n  slideInBottom,\n  slideInDown,\n  slideInLeft,\n  slideInRight,\n};\n\nexport default spring;\n"]},"metadata":{},"sourceType":"module"}