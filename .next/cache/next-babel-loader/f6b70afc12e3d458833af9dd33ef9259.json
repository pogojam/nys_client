{"ast":null,"code":"import React, { useState, useEffect, useRef } from \"react\";\n\nconst useObserver = ({\n  root = null,\n  rootMargin,\n  threshold = 0\n}) => {\n  const {\n    0: entry,\n    1: updateEntry\n  } = useState({});\n  const {\n    0: node,\n    1: setNode\n  } = useState(null);\n  const isWindow = false;\n  const observer = isWindow ? useRef(new window.IntersectionObserver(([entry]) => updateEntry(entry), {\n    root,\n    rootMargin,\n    threshold\n  })) : null;\n  useEffect(() => {\n    const {\n      current: currentObserver\n    } = observer;\n    currentObserver.disconnect();\n    if (node) currentObserver.observe(node);\n    return () => currentObserver.disconnect();\n  }, [node]);\n  return [setNode, entry];\n};\n\nexport default useObserver;","map":null,"metadata":{},"sourceType":"module"}